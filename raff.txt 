1. create ec2 instance 



It seems like you may be new to launching instances in EC2. Take a walkthrough to learn about EC2, how to launch instances and about best practices
Take a walkthrough
Do not show me this message again.

Launch an instance  Info
Amazon EC2 allows you to create virtual machines, or instances, that run on the AWS Cloud. Quickly get started by following the simple steps below.

Name and tags  Info
Name
kubernates-cluster
Add additional tags
Application and OS Images (Amazon Machine Image)  Info
An AMI contains the operating system, application server, and applications for your instance. If you don't see a suitable AMI below, use the search field or choose Browse more AMIs.

Quick Start
Amazon Linux
macOS
Ubuntu
Windows
Red Hat
SUSE Linux
Debian



Amazon Machine Image (AMI)

Ubuntu Server 24.04 LTS (HVM), SSD Volume Type
Free tier eligible
ami-0a716d3f3b16d290c (64-bit (x86)) / ami-0cab1941a8a08b817 (64-bit (Arm))
Virtualization: hvm
ENA enabled: true
Root device type: ebs
Description
Ubuntu Server 24.04 LTS (HVM),EBS General Purpose (SSD) Volume Type. Support available from Canonical (http://www.ubuntu.com/cloud/services).

Canonical, Ubuntu, 24.04, amd64 noble image
Architecture

64-bit (x86)
AMI ID
ami-0a716d3f3b16d290c
Publish Date
2025-08-21
Username
ubuntu
Verified provider
Instance type  Info | Get advice
Instance type

c7i-flex.large
Free tier eligible
Family: c7i-flex
2 vCPU
4 GiB Memory
Current generation: true
On-Demand SUSE base pricing: 0.14707 USD per Hour
On-Demand Linux base pricing: 0.09077 USD per Hour
On-Demand Windows base pricing: 0.17817 USD per Hour
On-Demand Ubuntu Pro base pricing: 0.09427 USD per Hour
On-Demand RHEL base pricing: 0.11957 USD per Hour
All generations
Compare instance types
Additional costs apply for AMIs with pre-installed software
Key pair (login)  Info
You can use a key pair to securely connect to your instance. Ensure that you have access to the selected key pair before you launch the instance.
Key pair name - required 

devops-live-project-k8s

Create new key pair
Network settings  Info
Edit
Network
 Info
vpc-0e3a758d071b2301e

Subnet
 Info
No preference (Default subnet in any availability zone)

Auto-assign public IP
 Info
Enable

Firewall (security groups)
 Info
A security group is a set of firewall rules that control the traffic for your instance. Add rules to allow specific traffic to reach your instance.
Create security group
Select existing security group
We'll create a new security group called 'launch-wizard-1' with the following rules:
Allow SSH traffic from
Helps you connect to your instance

Anywhere
0.0.0.0/0
Allow HTTPS traffic from the internet
To set up an endpoint, for example when creating a web server
Allow HTTP traffic from the internet
To set up an endpoint, for example when creating a web server
Rules with source of 0.0.0.0/0 allow all IP addresses to access your instance. We recommend setting security group rules to allow access from known IP addresses only.

Configure storage  Info
Advanced
1x
15
GiB

gp3
Root volume,
3000 IOPS,
Not encrypted
Add new volume
The selected AMI contains instance store volumes, however the instance does not allow any instance store volumes. None of the instance store volumes from the AMI will be accessible from the instance
Click refresh to view backup information
The tags that you assign determine whether the instance will be backed up by any Data Lifecycle Manager policies.

0 x File systemsEdit
Advanced details  Info
Summary
Number of instances
 Info
1
Software Image (AMI)
Canonical, Ubuntu, 24.04, amd6...read more
ami-0a716d3f3b16d290c
Virtual server type (instance type)
c7i-flex.large
Firewall (security group)
New security group
Storage (volumes)
1 volume(s) - 15 GiB
Cancel
Launch instance
Preview code

















2. connect by ssh to ec2 from my laptop


Connect Info
Connect to an instance using the browser-based client.


EC2 Instance Connect

Session Manager

SSH client

EC2 serial console
Instance ID

i-02ae0e6dd4e0bd80a (kubernates-cluster)
Open an SSH client.

Locate your private key file. The key used to launch this instance is devops-live-project-k8s.pem

Run this command, if necessary, to ensure your key is not publicly viewable.
chmod 400 "devops-live-project-k8s.pem"

Connect to your instance using its Public DNS:
ec2-13-62-98-230.eu-north-1.compute.amazonaws.com

Example:

ssh -i "devops-live-project-k8s.pem" ubuntu@ec2-13-62-98-230.eu-north-1.compute.amazonaws.com
Note: In most cases, the guessed username is correct. However, read your AMI usage instructions to check if the AMI owner has changed the default AMI username.













3. docker install 

sudo apt-get install docker.io














4. install kind => Configure 3 node cluster => install kubectl


ubuntu@ip-172-31-39-3:~$ mkdir k8s-install 
ubuntu@ip-172-31-39-3:~$ cd k8s-install/
ubuntu@ip-172-31-39-3:~/k8s-install$ nano kind.sh
ubuntu@ip-172-31-39-3:~/k8s-install$ rm kind.sh 
ubuntu@ip-172-31-39-3:~/k8s-install$ nano install_kind.sh
ubuntu@ip-172-31-39-3:~/k8s-install$ chmod +x install_kind.sh 
ubuntu@ip-172-31-39-3:~/k8s-install$ ./install_kind.sh 
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100    97  100    97    0     0    774      0 --:--:-- --:--:-- --:--:--   776
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100 6304k  100 6304k    0     0  13.7M      0 --:--:-- --:--:-- --:--:-- 13.7M
ubuntu@ip-172-31-39-3:~/k8s-install$ kind --version
kind version 0.20.0
ubuntu@ip-172-31-39-3:~/k8s-install$ nano config.yml
ubuntu@ip-172-31-39-3:~/k8s-install$ nano config.yml
ubuntu@ip-172-31-39-3:~/k8s-install$ nano config.yml
ubuntu@ip-172-31-39-3:~/k8s-install$ kind create cluster --config=config.yml
Creating cluster "kind" ...
⢀⡱ Ensuring node image (kindest/node:v1.30.0) 🖼 ^C
ubuntu@ip-172-31-39-3:~/k8s-install$ kind create cluster --config=config.yml --name=my-cluster
Creating cluster "my-cluster" ...
 ✓ Ensuring node image (kindest/node:v1.30.0) 🖼 
 ✓ Preparing nodes 📦 📦 📦  
 ✓ Writing configuration 📜 
 ✓ Starting control-plane 🕹️ 
 ✓ Installing CNI 🔌 
 ✓ Installing StorageClass 💾 
 ✓ Joining worker nodes 🚜 
Set kubectl context to "kind-my-cluster"
You can now use your cluster with:

kubectl cluster-info --context kind-my-cluster

Not sure what to do next? 😅  Check out https://kind.sigs.k8s.io/docs/user/quick-start/
ubuntu@ip-172-31-39-3:~/k8s-install$ nano install_kubectl.sh
ubuntu@ip-172-31-39-3:~/k8s-install$ chmod +x install_kubectl.sh 
ubuntu@ip-172-31-39-3:~/k8s-install$ ./install_kubectl.sh 
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   138  100   138    0     0    637      0 --:--:-- --:--:-- --:--:--   638
100 49.0M  100 49.0M    0     0   100M      0 --:--:-- --:--:-- --:--:--  238M
Client Version: v1.30.0
Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3
kubectl installation complete.
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl get nodes 
NAME                       STATUS   ROLES           AGE     VERSION
my-cluster-control-plane   Ready    control-plane   2m36s   v1.30.0
my-cluster-worker          Ready    <none>          2m14s   v1.30.0
my-cluster-worker2         Ready    <none>          2m14s   v1.30.0
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl get all
NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
service/kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   2m42s
ubuntu@ip-172-31-39-3:~/k8s-install$ 




4. install argocd


ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl get namespace
NAME                 STATUS   AGE
default              Active   5m14s
kube-node-lease      Active   5m14s
kube-public          Active   5m14s
kube-system          Active   5m14s
local-path-storage   Active   5m10s
ubuntu@ip-172-31-39-3:~/k8s-install$ docker ps 
CONTAINER ID   IMAGE                  COMMAND                  CREATED         STATUS         PORTS                       NAMES
12e2100f5577   kindest/node:v1.30.0   "/usr/local/bin/entr…"   5 minutes ago   Up 5 minutes                               my-cluster-worker
868abb9cb48f   kindest/node:v1.30.0   "/usr/local/bin/entr…"   5 minutes ago   Up 5 minutes   127.0.0.1:41103->6443/tcp   my-cluster-control-plane
a0e68f49842b   kindest/node:v1.30.0   "/usr/local/bin/entr…"   5 minutes ago   Up 5 minutes                               my-cluster-worker2
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl create namespace argocd
namespace/argocd created
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
customresourcedefinition.apiextensions.k8s.io/applications.argoproj.io created
customresourcedefinition.apiextensions.k8s.io/applicationsets.argoproj.io created
customresourcedefinition.apiextensions.k8s.io/appprojects.argoproj.io created
serviceaccount/argocd-application-controller created
serviceaccount/argocd-applicationset-controller created
serviceaccount/argocd-dex-server created
serviceaccount/argocd-notifications-controller created
serviceaccount/argocd-redis created
serviceaccount/argocd-repo-server created
serviceaccount/argocd-server created
role.rbac.authorization.k8s.io/argocd-application-controller created
role.rbac.authorization.k8s.io/argocd-applicationset-controller created
role.rbac.authorization.k8s.io/argocd-dex-server created
role.rbac.authorization.k8s.io/argocd-notifications-controller created
role.rbac.authorization.k8s.io/argocd-redis created
role.rbac.authorization.k8s.io/argocd-server created
clusterrole.rbac.authorization.k8s.io/argocd-application-controller created
clusterrole.rbac.authorization.k8s.io/argocd-applicationset-controller created
clusterrole.rbac.authorization.k8s.io/argocd-server created
rolebinding.rbac.authorization.k8s.io/argocd-application-controller created
rolebinding.rbac.authorization.k8s.io/argocd-applicationset-controller created
rolebinding.rbac.authorization.k8s.io/argocd-dex-server created
rolebinding.rbac.authorization.k8s.io/argocd-notifications-controller created
rolebinding.rbac.authorization.k8s.io/argocd-redis created
rolebinding.rbac.authorization.k8s.io/argocd-server created
clusterrolebinding.rbac.authorization.k8s.io/argocd-application-controller created
clusterrolebinding.rbac.authorization.k8s.io/argocd-applicationset-controller created
clusterrolebinding.rbac.authorization.k8s.io/argocd-server created
configmap/argocd-cm created
configmap/argocd-cmd-params-cm created
configmap/argocd-gpg-keys-cm created
configmap/argocd-notifications-cm created
configmap/argocd-rbac-cm created
configmap/argocd-ssh-known-hosts-cm created
configmap/argocd-tls-certs-cm created
secret/argocd-notifications-secret created
secret/argocd-secret created
service/argocd-applicationset-controller created
service/argocd-dex-server created
service/argocd-metrics created
service/argocd-notifications-controller-metrics created
service/argocd-redis created
service/argocd-repo-server created
service/argocd-server created
service/argocd-server-metrics created
deployment.apps/argocd-applicationset-controller created
deployment.apps/argocd-dex-server created
deployment.apps/argocd-notifications-controller created
deployment.apps/argocd-redis created
deployment.apps/argocd-repo-server created
deployment.apps/argocd-server created
statefulset.apps/argocd-application-controller created
networkpolicy.networking.k8s.io/argocd-application-controller-network-policy created
networkpolicy.networking.k8s.io/argocd-applicationset-controller-network-policy created
networkpolicy.networking.k8s.io/argocd-dex-server-network-policy created
networkpolicy.networking.k8s.io/argocd-notifications-controller-network-policy created
networkpolicy.networking.k8s.io/argocd-redis-network-policy created
networkpolicy.networking.k8s.io/argocd-repo-server-network-policy created
networkpolicy.networking.k8s.io/argocd-server-network-policy created
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl get svc -n argocd
NAME                                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
argocd-applicationset-controller          ClusterIP   10.96.188.152   <none>        7000/TCP,8080/TCP            40s
argocd-dex-server                         ClusterIP   10.96.31.5      <none>        5556/TCP,5557/TCP,5558/TCP   40s
argocd-metrics                            ClusterIP   10.96.19.231    <none>        8082/TCP                     40s
argocd-notifications-controller-metrics   ClusterIP   10.96.147.23    <none>        9001/TCP                     40s
argocd-redis                              ClusterIP   10.96.119.199   <none>        6379/TCP                     40s
argocd-repo-server                        ClusterIP   10.96.198.125   <none>        8081/TCP,8084/TCP            40s
argocd-server                             ClusterIP   10.96.130.142   <none>        80/TCP,443/TCP               40s
argocd-server-metrics                     ClusterIP   10.96.199.90    <none>        8083/TCP                     40s
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
service/argocd-server patched
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl get svc -n argocd
NAME                                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE
argocd-applicationset-controller          ClusterIP   10.96.188.152   <none>        7000/TCP,8080/TCP            3m5s
argocd-dex-server                         ClusterIP   10.96.31.5      <none>        5556/TCP,5557/TCP,5558/TCP   3m5s
argocd-metrics                            ClusterIP   10.96.19.231    <none>        8082/TCP                     3m5s
argocd-notifications-controller-metrics   ClusterIP   10.96.147.23    <none>        9001/TCP                     3m5s
argocd-redis                              ClusterIP   10.96.119.199   <none>        6379/TCP                     3m5s
argocd-repo-server                        ClusterIP   10.96.198.125   <none>        8081/TCP,8084/TCP            3m5s
argocd-server                             NodePort    10.96.130.142   <none>        80:30294/TCP,443:32063/TCP   3m5s
argocd-server-metrics                     ClusterIP   10.96.199.90    <none>        8083/TCP                     3m5s
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl port-forward svc/argocd-server -n argocd 32063:443 --address=0.0.0.0 &
[1] 15138
ubuntu@ip-172-31-39-3:~/k8s-install$ Forwarding from 0.0.0.0:32063 -> 8080

ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl port-forward -n argocd service/argocd-server 8443:443 &
[2] 15364
ubuntu@ip-172-31-39-3:~/k8s-install$ Forwarding from 127.0.0.1:8443 -> 8080
Forwarding from [::1]:8443 -> 8080
^C
ubuntu@ip-172-31-39-3:~/k8s-install$ ps aux | grep kubectl
ubuntu     15138  0.0  1.1 5472560 45556 pts/0   Sl   03:19   0:00 kubectl port-forward svc/argocd-server -n argocd 32063:443 --address=0.0.0.0
ubuntu     15364  0.0  1.1 5472304 45640 pts/0   Sl   03:25   0:00 kubectl port-forward -n argocd service/argocd-server 8443:443
ubuntu     15817  0.0  0.0   7076  2204 pts/0    S+   03:40   0:00 grep --color=auto kubectl
ubuntu@ip-172-31-39-3:~/k8s-install$ sudo kill -9 15138 15364
[2]+  Killed                  kubectl port-forward -n argocd service/argocd-server 8443:443
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl port-forward -n argocd svc/argocd-server 8443:443 --address=0.0.0.0
Forwarding from 0.0.0.0:8443 -> 8080
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
^C[1]+  Killed                  kubectl port-forward svc/argocd-server -n argocd 32063:443 --address=0.0.0.0
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl get secret -n argocd argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo
xz17IgBkSULDXU9a
ubuntu@ip-172-31-39-3:~/k8s-install$ kubectl port-forward -n argocd svc/argocd-server 8443:443 --address=0.0.0.0
Forwarding from 0.0.0.0:8443 -> 8080
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443
Handling connection for 8443




Excellent — that output explains exactly why you’re seeing **“connection refused.”**

Let’s break it down 👇

---

### 🧩 What’s happening

You currently have **two `kubectl port-forward` processes running**:

```
15138 → svc/argocd-server 32063:443 --address=0.0.0.0
15364 → service/argocd-server 8443:443   (default: localhost only)
```

✅ **Process 15138** is correct — it listens on all interfaces (`0.0.0.0`), meaning it can be reached via your EC2 public IP (`13.62.98.230:32063`).

❌ **Process 15364** is local-only (`127.0.0.1`), meaning it cannot be accessed from outside the EC2 instance.

---

### 🧰 What to do

Let’s clean this up and expose **one stable, accessible** port.

#### 1️⃣ Kill both running port-forward processes

```bash
sudo kill -9 15138 15364
```

---

#### 2️⃣ Start a new one that listens on all interfaces

```bash
kubectl port-forward -n argocd svc/argocd-server 8443:443 --address=0.0.0.0
```

✅ You should see:

```
Forwarding from 0.0.0.0:8443 -> 8080
```

Keep this terminal **open** (don’t close or Ctrl+C).

---

#### 3️⃣ Verify it’s listening globally

Run:

```bash
sudo netstat -tulnp | grep 8443
```

Expected output:

```
tcp6   0   0 :::8443   :::*   LISTEN   <pid>/kubectl
```

---

#### 4️⃣ Then from your **local browser**, open:

👉 **[https://13.62.98.230:8443](https://13.62.98.230:8443)**

Proceed past any SSL warning — you should now see the **Argo CD login page** 🎉

---

If you still get “refused to connect,” please share the result of this command:

```bash
sudo netstat -tulnp | grep 8443
```

That will confirm whether the port is open for external access.






































